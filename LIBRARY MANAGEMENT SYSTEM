#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Book {
public:
    int id;
    string title;
    string author;
    bool isAvailable;

    Book(int bookId, string bookTitle, string bookAuthor)
        : id(bookId), title(bookTitle), author(bookAuthor), isAvailable(true) {}
};

class Borrower {
public:
    int id;
    string name;
    string contact;

    Borrower(int borrowerId, string borrowerName, string borrowerContact)
        : id(borrowerId), name(borrowerName), contact(borrowerContact) {}
};

class Transaction {
public:
    int transactionId;
    int bookId;
    int borrowerId;
    string date;
    string type; // borrow or return

    Transaction(int transId, int bId, int brId, string transDate, string transType)
        : transactionId(transId), bookId(bId), borrowerId(brId), date(transDate), type(transType) {}
};

class Library {
private:
    vector<Book> books;
    vector<Borrower> borrowers;
    vector<Transaction> transactions;
    int nextTransactionId;

public:
    Library() : nextTransactionId(1) {}

    void addBook(int id, string title, string author) {
        books.push_back(Book(id, title, author));
    }

    void addBorrower(int id, string name, string contact) {
        borrowers.push_back(Borrower(id, name, contact));
    }

    void borrowBook(int bookId, int borrowerId, string date) {
        for (Book& book : books) {
            if (book.id == bookId && book.isAvailable) {
                book.isAvailable = false;
                transactions.push_back(Transaction(nextTransactionId++, bookId, borrowerId, date, "borrow"));
                cout << "Book borrowed successfully!" << endl;
                return;
            }
        }
        cout << "Book is not available." << endl;
    }

    void returnBook(int bookId, int borrowerId, string date) {
        for (Book& book : books) {
            if (book.id == bookId && !book.isAvailable) {
                book.isAvailable = true;
                transactions.push_back(Transaction(nextTransactionId++, bookId, borrowerId, date, "return"));
                cout << "Book returned successfully!" << endl;
                return;
            }
        }
        cout << "Book was not borrowed." << endl;
    }

    void listBooks() {
        for (const Book& book : books) {
            cout << "ID: " << book.id << ", Title: " << book.title << ", Author: " << book.author 
                 << ", Available: " << (book.isAvailable ? "Yes" : "No") << endl;
        }
    }

    void listBorrowers() {
        for (const Borrower& borrower : borrowers) {
            cout << "ID: " << borrower.id << ", Name: " << borrower.name 
                 << ", Contact: " << borrower.contact << endl;
        }
    }

    void listTransactions() {
        for (const Transaction& trans : transactions) {
            cout << "Transaction ID: " << trans.transactionId << ", Book ID: " << trans.bookId
                 << ", Borrower ID: " << trans.borrowerId << ", Date: " << trans.date 
                 << ", Type: " << trans.type << endl;
        }
    }
};

int main() {
    Library library;

    // Add some books
    library.addBook(1, "The Great Gatsby", "F. Scott Fitzgerald");
    library.addBook(2, "1984", "George Orwell");
    library.addBook(3, "To Kill a Mockingbird", "Harper Lee");

    // Add some borrowers
    library.addBorrower(1, "Alice", "alice@example.com");
    library.addBorrower(2, "Bob", "bob@example.com");

    // Borrow a book
    library.borrowBook(1, 1, "2024-11-23");

    // List books, borrowers, and transactions
    cout << "\nBooks in the library:\n";
    library.listBooks();

    cout << "\nBorrowers in the library:\
